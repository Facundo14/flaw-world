---
interface Props {
	images: string[];
}

const { images } = Astro.props;
---

<div id="animation-carousel" class="relative w-1/2" data-carousel="static">
	<div class="relative h-[400px] overflow-hidden rounded-lg">
		{
			images.map((image, index) => (
				<div class="duration-200 ease-linear" data-carousel-item>
					<img
						src={image}
						class="w-full h-full object-fit"
						alt={`Image ${index + 1}`}
					/>
				</div>
			))
		}
	</div>
	<!-- Slider controls -->
	<button
		type="button"
		class="absolute top-0 start-0 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
		data-carousel-prev
	>
		<span
			class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
		>
			<svg
				class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180"
				aria-hidden="true"
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 6 10"
			>
				<path
					stroke="currentColor"
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M5 1 1 5l4 4"></path>
			</svg>
			<span class="sr-only">Previous</span>
		</span>
	</button>
	<button
		type="button"
		class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
		data-carousel-next
	>
		<span
			class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
		>
			<svg
				class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180"
				aria-hidden="true"
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 6 10"
			>
				<path
					stroke="currentColor"
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="m1 9 4-4-4-4"></path>
			</svg>
			<span class="sr-only">Next</span>
		</span>
	</button>
</div>

<script>
	import { Carousel } from 'flowbite';
	import type {
		CarouselItem,
		CarouselOptions,
		CarouselInterface,
	} from 'flowbite';
	import type { InstanceOptions } from 'flowbite';

	const carouselElement: HTMLElement | null =
		document.getElementById('carousel-example');

	const items: CarouselItem[] = [
		{
			position: 0,
			el: document.getElementById('carousel-item-1') as HTMLElement,
		},
		{
			position: 1,
			el: document.getElementById('carousel-item-2') as HTMLElement,
		},
		{
			position: 2,
			el: document.getElementById('carousel-item-3') as HTMLElement,
		},
		{
			position: 3,
			el: document.getElementById('carousel-item-4') as HTMLElement,
		},
	];

	// object options with default values
	const options: CarouselOptions = {
		defaultPosition: 1,
		interval: 3000,

		indicators: {
			activeClasses: 'bg-white dark:bg-gray-800',
			inactiveClasses:
				'bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800',
			items: [
				{
					position: 0,
					el: document.getElementById(
						'carousel-indicator-1'
					) as HTMLElement,
				},
				{
					position: 1,
					el: document.getElementById(
						'carousel-indicator-2'
					) as HTMLElement,
				},
				{
					position: 2,
					el: document.getElementById(
						'carousel-indicator-3'
					) as HTMLElement,
				},
				{
					position: 3,
					el: document.getElementById(
						'carousel-indicator-4'
					) as HTMLElement,
				},
			],
		},

		// callback functions
		onNext: () => {
			console.log('next slider item is shown');
		},
		onPrev: () => {
			console.log('previous slider item is shown');
		},
		onChange: () => {
			console.log('new slider item has been shown');
		},
	};

	// instance options object
	const instanceOptions: InstanceOptions = {
		id: 'carousel-example',
		override: true,
	};

	const carousel: CarouselInterface = new Carousel(
		carouselElement,
		items,
		options,
		instanceOptions
	);

	carousel.cycle();

	// set event listeners for prev and next buttons
	const $prevButton = document.getElementById(
		'data-carousel-prev'
	) as HTMLElement;
	const $nextButton = document.getElementById(
		'data-carousel-next'
	) as HTMLElement;

	$prevButton.addEventListener('click', () => {
		carousel.prev();
	});

	$nextButton.addEventListener('click', () => {
		carousel.next();
	});
</script>
